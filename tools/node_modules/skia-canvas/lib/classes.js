"use strict"

var fs = require('fs'),
    {inspect} = require('util'),
    {extname} = require('path'),
    glob = require('glob').sync,
    get = require('simple-get'),
    native = require('../native'),
    {DOMMatrix} = require('./geometry'),
    {parseFont, parseVariant, parseFilter} = require('./parse'),
    REPR = inspect.custom

//
// Neon <-> Node interface
//

// accessor for calling the rust implementation of a shadowed method
const $ = (obj, s, ...args) =>{
  let fn = Symbol.for(s)
  return obj[fn](...args)
}

// getter/setter maker
const getset = (verb, attr) => {
  let sym = Symbol.for(attr)
  return verb=='set' ? function(val){ this[sym](val) }
       : verb=='get' ? function(){ return this[sym]() }
       : undefined;
}

// shorthand for attaching read-only attributes
const readOnly = (obj, attr, value) => {
  Object.defineProperty(obj, attr, {value, writable:false, enumerable:true})
}

// convert arguments list to a string of type abbreviations
function signature(args){
  return args.map(v => (Array.isArray(v) ? 'a' : {string:'s', number:'n', object:'o'}[typeof v] || 'x')).join('')
}

// adjust the prototype of the class generated by the rust code
function RustClass(cls){
  let proto = cls.prototype,
      shadow = (key, rename) => {
        proto[Symbol.for(rename || key)] = proto[key];
        delete proto[key]
      };

  let m, props = {};
  for (let key of Object.getOwnPropertyNames(proto)){
    if (m = key.match(/^([sg]et)_(.*)/)){
      // collect and group all the get_* and set_* methods, renaming them using symbols.
      let [verb, attr] = m.slice(1)
      props[attr] = props[attr] || {}
      props[attr][verb] = getset(verb, key)
      shadow(key)
    }else if (m = key.match(/^_(.*)/)){
      // stow flagged rust Fns behind symbols so they can be called as 'super' methods
      shadow(key, m[1])
    }
  }

  // create a getter/setter property mapping to the collected methods
  for (let [key, prop] of Object.entries(props)) Object.defineProperty(proto, key, prop)

  return cls
}

//
// Helpers to reconcile Skia and DOMMatrix’s disagreement about row/col orientation
//

function toSkMatrix(jsMatrix){
  if (Array.isArray(jsMatrix)){
    var [a, b, c, d, e, f] = jsMatrix
  }else{
    var {a, b, c, d, e, f} = jsMatrix
  }
  return [a, c, e, b, d, f]
}

function fromSkMatrix(skMatrix){
  // TBD: how/if to map the perspective terms
  let [a, c, e, b, d, f, p0, p1, p2] = skMatrix
  return new DOMMatrix([a, b, c, d, e, f])
}

//
// Mime type <-> File extension mappings
//

let png = "image/png",
    jpg = "image/jpeg",
    jpeg = "image/jpeg",
    pdf = "application/pdf",
    svg = "image/svg+xml",
    gif = "image/gif",
    heic = "image/heic",
    webp = "image/webp";

function toMime(ext){
  return {
    png, jpg, jpeg, gif, pdf, svg, heic, webp
  }[(ext||'').replace(/^\./, '').toLowerCase()]
}

function fromMime(mime){
  return {
    [png]: "png", [jpg]: "jpg", [pdf]: "pdf", [svg]: "svg",
    [gif]: "gif", [heic]: "heic", [webp]: "webp",
  }[mime]
}

const toFormat = str => fromMime(toMime(str) || str),
      toString = val => typeof val=='string' ? val : new String(val).toString();

//
// Extensions to the classes defined in rust (primarily for argument boxing/unboxing)
//

class Canvas extends RustClass(native.Canvas){
  static parent = new WeakMap()
  static context = new WeakMap()

  constructor(width, height, density){
    super(width, height, density)
    let ctx = new CanvasRenderingContext2D(width * this.density, height * this.density, FontLibrary.shared)
    Canvas.parent.set(ctx, this)
    Canvas.context.set(this, [ctx])
  }

  getContext(kind){
    return (kind=="2d") ? Canvas.context.get(this)[0] : null
  }

  newPage(width, height){
    let ctx = new CanvasRenderingContext2D(width * this.density, height * this.density, FontLibrary.shared)
    Canvas.parent.set(ctx, this)
    Canvas.context.get(this).unshift(ctx)
    Object.assign(this, {width, height})
    return ctx
  }

  get pages(){
    return Canvas.context.get(this).slice().reverse()
  }

  get png(){ return this.toBuffer("png") }
  get jpg(){ return this.toBuffer("jpg") }
  get pdf(){ return this.toBuffer("pdf") }
  get svg(){ return this.toBuffer("svg") }

  saveAs(filename, {format, quality=100}={}){
    var seq
    filename = filename.replace(/{(\d*)}/g, (_, pad) => {
      pad = parseInt(pad, 10)
      seq = isFinite(pad) ? pad : isFinite(seq) ? seq : -1
      return "{}"
    })

    let ext = format || extname(filename),
        fmt = toFormat(ext);
    if (!fmt){
      throw new Error(`Unsupported file format "${ext}" (expected "png", "jpg", "pdf", or "svg")`)
    }
    $(this, "saveAs", filename, seq, fmt, quality)
  }

  toBuffer(extension, {format="png", quality=100, page}={}){
    ({format, quality, page} = Object.assign(
      {format, quality, page},
      typeof extension == 'string' ? {format:extension}
    : typeof extension == 'object' ? extension
    : {}
    ));

    let fmt = toFormat(format),
        pp = this.pages.length,
        idx = page >= 0 ? pp - page
            : page < 0 ? pp + page
            : undefined

    if (!fmt){
      throw new Error(`Unsupported file format "${format}" (expected "png", "jpg", "pdf", or "svg")`)
    }else if (isFinite(idx) && idx < 0 || idx >= pp){
      throw new RangeError(
        pp == 1 ? `Canvas only has a ‘page 1’ (${page} is out of bounds)`
                : `Canvas has pages 1–${pp} (${page} is out of bounds)`
      )
    }

    return $(this, "toBuffer", fmt, quality, idx)
  }

  toDataURL(extension, {format="png", quality=100, page}={}){
    ({format, quality, page} = Object.assign(
      {format, quality, page},
      typeof extension == 'string' ? {format:extension}
    : typeof extension == 'object' ? extension
    : {}
    ));

    let fmt = toFormat(format),
        mime = toMime(fmt),
        buffer = this.toBuffer({format, quality, page});
    return `data:${mime};base64,${buffer.toString('base64')}`
  }

  [REPR](depth, options) {
    let {width, height} = this
    return `Canvas ${inspect({width, height}, options)}`
  }
}

class CanvasRenderingContext2D extends RustClass(native.CanvasRenderingContext2D){
  get canvas(){ return Canvas.parent.get(this) }

  get currentTransform(){ return fromSkMatrix( $(this, 'get_currentTransform') ) }
  set currentTransform(matrix){  $(this, 'set_currentTransform', toSkMatrix(matrix) ) }
  getTransform(){ return this.currentTransform }
  setTransform(matrix){
    this.currentTransform = arguments.length > 1 ? [...arguments] : matrix
  }

  get font(){ return $(this, 'get_font') }
  set font(str){ $(this, 'set_font', parseFont(str)) }
  get fontVariant(){ return $(this, 'get_fontVariant') }
  set fontVariant(str){ $(this, 'set_fontVariant', parseVariant(str)) }

  measureText(text, ...args){
    let [metrics, ...lines] = $(this, 'measureText', toString(text), ...args)
    return new TextMetrics(metrics, lines)
  }

  fillText(text, ...args){
    $(this, 'fillText', toString(text), ...args)
  }

  strokeText(text, ...args){
    $(this, 'strokeText', toString(text), ...args)
  }

  get filter(){ return $(this, 'get_filter') }
  set filter(str){ $(this, 'set_filter', parseFilter(str)) }
  createImageData(width, height){ return new ImageData(width, height) }
  getImageData(...args){ return new ImageData( $(this, 'getImageData', ...args) ) }

  createLinearGradient(...args){ return new CanvasGradient("Linear", ...args) }
  createRadialGradient(...args){ return new CanvasGradient("Radial", ...args) }
  createPattern(...args){ return new CanvasPattern(...args) }

  [REPR](depth, options) {
    let props = [ "canvas", "currentTransform", "fillStyle", "strokeStyle", "filter", "font", "direction", "textAlign", "textBaseline",
                  "globalAlpha", "globalCompositeOperation", "imageSmoothingEnabled", "imageSmoothingQuality", "shadowBlur", "shadowColor",
                  "shadowOffsetX", "shadowOffsetY", "lineCap", "lineDashOffset", "lineJoin", "lineWidth", "miterLimit" ]
    let info = {}
    if (depth > 0 ){
      for (var prop of props){
        try{ info[prop] = this[prop] }
        catch{ info[prop] = undefined }
      }
    }
    return `CanvasRenderingContext2D ${inspect(info, options)}`
  }
}

class Path2D extends RustClass(native.Path2D){
  addPath(path, matrix){
    if (matrix) $(this, 'addPath', path, toSkMatrix(matrix) )
    else $(this, 'addPath', path)
  }
}

class CanvasGradient extends RustClass(native.CanvasGradient){}

class CanvasPattern extends RustClass(native.CanvasPattern){
  setTransform(matrix){
    if (arguments.length>1) matrix = [...arguments]
    $(this, 'setTransform', toSkMatrix(matrix) )
  }
}

class Image extends RustClass(native.Image){
  get src(){ return $(this, "get_src") }
  set src(src){
    var data

    if (Buffer.isBuffer(src)) data = src
    else if (typeof src != 'string') return
    else if (/^\s*data:/.test(src)) {
      // data URI
      let split = src.indexOf(','),
          enc = src.lastIndexOf('base64', split) !== -1 ? 'base64' : 'utf8',
          content = src.slice(split + 1);
      data = Buffer.from(content, enc);
    } else if (/^\s*https?:\/\//.test(src)) {
      // remote URL
      get.concat(src, (err, res, data) => {
        let code = res.statusCode,
            onerror = this.onerror || (() => {}),
            onload = this.onload || (() => {});
        if (err) onerror(err)
        else if (code < 200 || code >= 300) {
          onerror(new Error(`Failed to load image from "${src}" (error ${code})`))
        }else{
          if ($(this, "set_data", data)) onload(this)
          else onerror(new Error("Could not decode image data"))
        }
      })
    } else {
      // local file path
      data = fs.readFileSync(src);
    }

    $(this, "set_src", src)
    if (data){
      let onerror = this.onerror || (() => {}), onload = this.onload || (() => {});
      if ($(this, "set_data", data)) onload(this)
      else onerror(new Error("Could not decode image data"))
    }
  }

  [REPR](depth, options) {
    let {width, height, complete, src} = this
    options.maxStringLength = src.match(/^data:/) ? 128 : Infinity;
    return `Image ${inspect({width, height, complete, src}, options)}`
  }
}

class ImageData extends RustClass(native.ImageData){
  constructor(width, height){
    if (arguments[0] instanceof native.ImageData){
      var {width, height, data} = arguments[0]
    }
    super(width, height)
    let bytes = (this.width * this.height * 4)
    readOnly(this, "data", new Uint8ClampedArray(data && data.buffer || bytes))
  }

  [REPR](depth, options) {
    let {width, height, data} = this
    return `ImageData ${inspect({width, height, data}, options)}`
  }
}

const _expand = paths => [paths].flat(2).map(filename => glob(filename)).flat()

class FontLibrary extends RustClass(native.FontLibrary){
  static shared = new FontLibrary()

  use(...args){
    let sig = signature(args)
    if (sig=='o'){
      let results = {}
      for (let [alias, paths] of Object.entries(args.shift())){
        results[alias] = $(this, "addFamily", alias, _expand(paths))
      }
      return results
    }else if (sig.match(/^s?[as]$/)){
      let fonts = _expand(args.pop())
      let alias = args.shift()
      return $(this, "addFamily", alias, fonts)
    }else{
      throw new Error("Expected an array of file paths or an object mapping family names to font files")
    }
  }

}

class TextMetrics{
  constructor([
    width, left, right, ascent, descent,
    fontAscent, fontDescent, emAscent, emDescent,
    hanging, alphabetic, ideographic
  ], lines){
    readOnly(this, "width", width)
    readOnly(this, "actualBoundingBoxLeft", left)
    readOnly(this, "actualBoundingBoxRight", right)
    readOnly(this, "actualBoundingBoxAscent", ascent)
    readOnly(this, "actualBoundingBoxDescent", descent)
    readOnly(this, "fontBoundingBoxAscent", fontAscent)
    readOnly(this, "fontBoundingBoxDescent", fontDescent)
    readOnly(this, "emHeightAscent", emAscent)
    readOnly(this, "emHeightDescent", emDescent)
    readOnly(this, "hangingBaseline", hanging)
    readOnly(this, "alphabeticBaseline", alphabetic)
    readOnly(this, "ideographicBaseline", ideographic)
    readOnly(this, "lines", lines.map( ([x, y, width, height, baseline, startIndex, endIndex]) => (
      {x, y, width, height, baseline, startIndex, endIndex}
    )))
  }
}

module.exports = {
  Canvas, CanvasRenderingContext2D, Path2D,
  Image, ImageData, CanvasGradient, CanvasPattern,
  FontLibrary:FontLibrary.shared
}
